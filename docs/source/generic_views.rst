=========================
Using generic view groups
=========================

.. Note::

   This feature is still an experimental. The implementation might
   change in the future.

Overview
--------

You can use ``kay.generics.CRUDViewGroup`` in order to define generic
CRUD views easily. You just need your own model, modelform definition,
and your own templates for rendering htmls.

Your first CRUD
---------------

Let's see the simplest example.

myapp/models.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.models

  from google.appengine.ext import db

  # Create your models here.

  class MyModel(db.Model):
    comment = db.StringProperty()

    def __unicode__(self):
      return self.comment


``__unicode__`` method here is just for rendering entities of this
model in a simple way. The default templates for list entities use
this method for rendering entities. So, you don't need this method if
you render entities in other way.

myapp/forms.py

.. code-block:: python

  from kay.utils.forms.modelform import ModelForm

  from myapp.models import MyModel

  class MyForm(ModelForm):
    class Meta:
      model = MyModel

This is a very simple modelform.

Then, you can just create an object for CRUD operation in urls.py.

myapp/urls.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.urls

  from kay.generics import CRUDViewGroup

  from myapp.forms import MyForm
  from myapp.models import MyModel

  class MyCRUDViewGroup(CRUDViewGroup):
    model = MyModel
    form = MyForm

  view_groups = [MyCRUDViewGroup()]


That's all. You may want to add ``kay.utils.flash.FlashMiddleware``
for your convenicence.

settings.py

.. code-block:: python

  MIDDLEWARE_CLASSES = (
    'kay.utils.flash.FlashMiddleware',
  )

Then, you can access '/mymodel/list' for seeing the list of MyModel
entities. Here are default mapping rules generated by MyCRUDViewGroup:

.. code-block:: python

  Map([[<Rule '/mymodel/list' -> myapp/list_mymodel>,
   <Rule '/mymodel/list/<cursor>' -> myapp/list_mymodel>,
   <Rule '/mymodel/show/<key>' -> myapp/show_mymodel>,
   <Rule '/mymodel/create' -> myapp/create_mymodel>,
   <Rule '/mymodel/update/<key>' -> myapp/update_mymodel>,
   <Rule '/mymodel/delete/<key>' -> myapp/delete_mymodel>]])

Using your own templates
------------------------

TODO


Access control
--------------

TODO

