=========================
Using generic view groups
=========================

.. Note::

   This feature is still an experimental. The implementation might
   change in the future.

Overview
--------

You can use ``kay.generics.CRUDViewGroup`` in order to define generic
CRUD views easily. You just need your own model, modelform definition,
and your own templates for rendering htmls.

Your first CRUD
---------------

Let's see the simplest example.

myapp/models.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.models

  from google.appengine.ext import db

  # Create your models here.

  class MyModel(db.Model):
    comment = db.StringProperty()

    def __unicode__(self):
      return self.comment


``__unicode__`` method here is just for rendering entities of this
model in a simple way. The default templates for list entities use
this method for rendering entities. So, you don't need this method if
you render entities in other way.

myapp/forms.py

.. code-block:: python

  from kay.utils.forms.modelform import ModelForm

  from myapp.models import MyModel

  class MyForm(ModelForm):
    class Meta:
      model = MyModel

This is a very simple modelform.

Then, you can just create an object for CRUD operation in urls.py.

myapp/urls.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.urls

  from kay import generics

  from myapp.forms import MyForm
  from myapp.models import MyModel

  class MyCRUDViewGroup(generics.CRUDViewGroup):
    model = MyModel
    form = MyForm

  view_groups = [MyCRUDViewGroup()]


That's all. You may want to add ``kay.utils.flash.FlashMiddleware``
for your convenicence.

settings.py

.. code-block:: python

  MIDDLEWARE_CLASSES = (
    'kay.utils.flash.FlashMiddleware',
  )

Then, you can access '/mymodel/list' for seeing the list of MyModel
entities. Here are default mapping rules generated by MyCRUDViewGroup:

.. code-block:: python

  Map([[<Rule '/mymodel/list' -> myapp/list_mymodel>,
   <Rule '/mymodel/list/<cursor>' -> myapp/list_mymodel>,
   <Rule '/mymodel/show/<key>' -> myapp/show_mymodel>,
   <Rule '/mymodel/create' -> myapp/create_mymodel>,
   <Rule '/mymodel/update/<key>' -> myapp/update_mymodel>,
   <Rule '/mymodel/delete/<key>' -> myapp/delete_mymodel>]])

You can also use string for the values of ``model`` and ``form`` class
attribute for loading modules lazily as follows:

myapp/urls.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.urls

  from kay import generics

  class MyCRUDViewGroup(generics.CRUDViewGroup):
    model = 'myapp.models.MyModel'
    form = 'myapp.forms.MyForm'

  view_groups = [MyCRUDViewGroup()]


Using your own templates
------------------------

You can set ``templates`` class attribute for using your own templates for rendering html. Here is a simple example:

.. code-block:: python

  class MyCRUDViewGroup(CRUDViewGroup):
    model = 'myapp.models.MyModel'
    form = 'myapp.forms.MyForm'
    templates = {
      'show': 'myapp/mymodel_show.html',
      'list': 'myapp/mymodel_list.html',
      'update': 'myapp/mymodel_update.html'
    }

Default templates is set as follows:

.. code-block:: python

  templates = {
    'list': '_internal/general_list.html',
    'show': '_internal/general_show.html',
    'update': '_internal/general_update.html',
  }

So, for an opener, you can copy
``kay/_internal/tempaltes/general_***.html`` to your application's
template directory, and you can edit those files as you like.


Giving additional context on creating/updating entities
-------------------------------------------------------

Sometimes you need to have some additional values on creating/updating
entities other than a modelform takes care about. You can define
``get_additional_context_on_create`` or
``get_additional_context_on_update`` methods on your own CRUDView
classes for this purpose.

These methods must receive ``request`` and ``form`` instances as
arguments, and must return a dictionary. This dictionary will be
passed to ``save()`` method of your ModelForm instance.


Setting current user as a paticular property
--------------------------------------------

You can use ``kay.db.OwnerProperty`` for this purpose.  The default
value of this property is a current user's key if user is sienged in,
otherwise, None. You need to exclude this property on your form like
an example bellow:

myapp/models.py

.. code-block:: python

  # -*- coding: utf-8 -*-
  # myapp.models

  from google.appengine.ext import db
  from kay.db import OwnerProperty

  # Create your models here.

  class MyModel(db.Model):
    user = OwnerProperty()
    comment = db.StringProperty()

    def __unicode__(self):
      return self.comment

myapp/forms.py

.. code-block:: python

  from kay.utils.forms.modelform import ModelForm

  from myapp.models import MyModel

  class MyForm(ModelForm):
    class Meta:
      model = MyModel
      exclude = ('user',)

Then, you can just create an object for CRUD operation in urls.py.


Filter which entity to show on the list
---------------------------------------

You can control which entity to show on the list by defining a
``get_query`` instance method on your own CRUDViewGroup subclass.

An example bellow shows how to show entities owned by current user:

.. code-block:: python

   class MyCRUDViewGroup(generics.CRUDViewGroup):
     model = 'myapp.models.MyModel'
     form = 'myapp.forms.MyForm'

     def get_query(self, request):
       return self.model.all().filter('user =', request.user.key()).\
         order('-created')

As you can see, get_query receives only current request object as its
argument, and must return ``Query`` instance.


Access control
--------------

You can limit a particular operation to a particular set of users by
defining ``authorize`` instance method on your own CRUDViewGroup
subclass. These operations are classified in ``list``, ``show``,
``create``, ``update``, ``delete``.

``kay.generics`` package has useful presets for this method, so you
can choose one of them if you like.

* kay.generics.login_required
* kay.generics.admin_required
* kay.generics.only_owner_can_write
* kay.generics.only_owner_can_write_except_for_admin

An example bellow shows how to use one of these presets:

.. code-block:: python

   class MyCRUDViewGroup(generics.CRUDViewGroup):
     model = 'myapp.models.MyModel'
     form = 'myapp.forms.MyForm'
     authorize = generics.only_owner_can_write_except_for_admin

TODO: detailed docs about ``authorize`` method.
