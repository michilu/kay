====================
Kay 管理用スクリプト
====================

概要
----

Kay には ``manage.py`` という管理用のスクリプトが付いています。このスクリプトで、アプリケーション管理タスクの大部分をカバーできます。パラメーター無しで呼出せばヘルプを見る事ができます。

タスクの一部は、Google App Engine SDK が提供するコマンドを実行しますが、実行の際にパラメータの調整や、事前準備を行います。

ですので、GAE 附属のスクリプト( appcfg.py や dev_appserver.py または bulkloader.py )をそのまま使用する事はなるべく避けてください。

appcfg サブコマンド
-------------------

このサブコマンドは 素のGAE で appcfg.py にて行うタスクを実行するためのものです。appcfg サブコマンドの使用方法は下記のとおりです:

.. code-block:: bash

  $ python manage.py appcfg [options] <action>

action は下記のどれかである必要があります:

 * cron_info: cron ジョブの情報を表示します。
 * download_data: データストアからデータをダウンロードします。
 * help: あるアクションのヘルプを表示します。
 * request_logs: Apache の common log フォーマットでログを書き出します。
 * rollback: 実行途中のアップデートをロールバックします。
 * update: アプリケーションをアップロードします。
 * update_cron: アプリケーションの cron 設定を更新します。
 * update_indexes: アプリケーションの index を更新します。
 * update_queues: アプリケーションのタスクキュー設定を更新します。
 * upload_data: データストアにデータをアップロードします。
 * vacuum_indexes: アプリケーションで使用しない index を削除します。

``help`` アクションに続いてアクション名を指定する事で、特定のアクションに対するヘルプを表示できます。例えば、下記のように実行すれば ``update`` アクションのヘルプが得られます:

.. code-block:: bash

  $ python manage.py appcfg help update

Kay は引数にカレントディレクトリを自動的に補完します。ですので、各アクションのヘルプにあるようにアプリケーションディレクトリを指定する必要はありません(この動作はちょっと紛らわしいので将来は修正されるかもしれません)。例えばアプリケーションをアップロードするには下記のコマンドでオッケイです:

.. code-block:: bash

  $ python manage.py appcfg update  


Jinja2 事前パース
-----------------

現バージョンの Kay は、GAE のサーバ上では事前パースされた jinja2 テンプレートのみ読み込みますので、デプロイの前にテンプレートの事前パースが必要です。manage.py スクリプトは自動的に事前パースを行いますので、普段ユーザーはこの事を気にする必要はありません。もし、MacOSX のランチャーを使っている場合には ``deploy`` ボタンを押すだけでは jinja2 テンプレートの事前パースは行われません。このような場合は、下記のようにすればテンプレートの事前パースを行う事ができます:

.. code-block:: bash

  $ python manage.py preparse_apps


